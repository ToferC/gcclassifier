from django.db import models
from django.utils import timezone
from django.db.models import F
from gc_classifier.users.models import User
from django.template.defaultfilters import slugify

# Create your models here.

class Document(models.Model):

    EN = "English"
    FR = "French"
    BI = "Bilingual"

    LANGUAGES = (
        (EN, "English"),
        (FR, "French"),
        (BI, "Bilingual")
        )

    title = models.CharField(max_length=128)
    creator = models.ForeignKey(User)
    created_date = models.DateTimeField(auto_now=True)
    edited_date = models.DateTimeField(auto_now=True)
    content = models.TextField(max_length=16000)
    language = models.CharField(max_length=8, choices=LANGUAGES,
    	default='EN')
    published = models.BooleanField(default=True)
    slug = models.SlugField(unique=True, max_length=255)

    def __str__(self):
        return self.title

    def save(self, *args, **kwargs):
        self.slug = slugify(self.title)
        super(Document, self).save(*args, **kwargs)


class Community(models.Model):
    name = models.CharField(max_length=128)
    creator = models.ForeignKey(User)
    description = models.TextField(null=True, blank=True)
    image = models.ImageField(upload_to='images/community_images/%Y/%m/%d/%H_%M_%S',
        null=True, blank=True, default='images/community_images/nothing.jpg')
    created_date = models.DateTimeField(auto_now=True)
    edited_date = models.DateTimeField(auto_now=True)

    slug = models.SlugField(unique=True, max_length=255)

    def __str__(self):
        return self.name

    def save(self, *args, **kwargs):
        self.slug = slugify(self.name)
        super(Community, self).save(*args, **kwargs)


class Rating(models.Model):
    '''
        Model to establish link between documents and recommended communities.
        Ratings can be set by users on upload or generated by the classifier.
    '''

    document = models.ForeignKey(Document, on_delete=models.CASCADE)
    community = models.ForeignKey(Community, on_delete=models.CASCADE)
    user_generated = models.BooleanField(default=False)
    rating = models.FloatField()
    created_date = models.DateTimeField(auto_now=True)
    edited_date = models.DateTimeField(auto_now=True)


class Tag(models.Model):
    '''
        Model for meta-data tags for documents
        Tags are related to Communities via Keywords
    '''

    EN = "English"
    FR = "French"

    LANGUAGES = (
        (EN, "English"),
        (FR, "French"),
        )

    name = models.CharField(max_length=128)
    creator = models.ForeignKey(User)
    user_generated = models.BooleanField(default=False)
    language = models.CharField(max_length=4, default="EN",
        choices=LANGUAGES)
    description = models.TextField(null=True, blank=True)
    image = models.ImageField(upload_to='images/tag_images/%Y/%m/%d/%H_%M_%S',
        null=True, blank=True, default='images/tag_images/nothing.jpg')
    created_date = models.DateTimeField(auto_now=True)
    edited_date = models.DateTimeField(auto_now=True)

    slug = models.SlugField(unique=True, max_length=255)

    def __str__(self):
        return self.name

    def save(self, *args, **kwargs):
        self.slug = slugify(self.name)
        super(Tag, self).save(*args, **kwargs)


class KeyWord(models.Model):
    '''
        Model to establish relationship between Tag
        and Communities
    '''

    community = models.ForeignKey(Community)
    tag = models.ForeignKey(Tag)
    user_generated = models.BooleanField(default=False)
    rating = models.FloatField()
    created_date = models.DateTimeField(auto_now=True)
    edited_date = models.DateTimeField(auto_now=True)


class Relationship(models.Model):
    '''
        Model to establish relationship between Tags
    '''

    SC = "Subject category"
    HN = "History note"
    RT = "Related term"
    BT = "Broader term"
    NT = "Narrower term"
    UF = "Used for"
    US = "Use"
    TR = "Translation"

    RELATIONSHIPS = (
        (SC, "Subject category"),
        (HN, "History note"),
        (RT, "Related term"),
        (BT, "Broader term"),
        (NT, "Narrower term"),
        (UF, "Used for"),
        (US, "Use"),
        (TR, "Translation"),
        )

    from_tag = models.ForeignKey(Tag,
        related_name='from_tags',
        related_query_name='from_tag')
    to_tag = models.ForeignKey(Tag,
        related_name='to_tags',
        related_query_name='to_tag')
    relationship_type = models.CharField(max_length=12,
        choices=RELATIONSHIPS)
    rating = models.FloatField(default=1.0)
    created_date = models.DateTimeField(auto_now=True)
    edited_date = models.DateTimeField(auto_now=True)